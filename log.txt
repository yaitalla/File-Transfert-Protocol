commit d132432f87db59d81d77f28287a68ade768bf3de
Author: yaitalla <yaitalla.dev@gmail.com>
Date:   Mon Nov 12 17:17:14 2018 +0100

    17h17 12.11.18

diff --git a/client/components/Landing.js b/client/components/Landing.js
new file mode 100644
index 0000000..e69de29
diff --git a/config/conf.js b/config/conf.js
deleted file mode 100644
index 99ca4de..0000000
--- a/config/conf.js
+++ /dev/null
@@ -1,3 +0,0 @@
-const tokenUpload = '58zf6f558fs58f';
-
-module.exports = tokenUpload;
diff --git a/config/config.json b/config/config.json
deleted file mode 100644
index 5af1c12..0000000
--- a/config/config.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "secret": "superkangourou",
-  "refreshSecret": "superpoissonfrais",
-  "tokenLife": 900,
-  "refreshTokenLife": 9000
-}
diff --git a/curl.sh b/curl.sh
deleted file mode 100755
index cb8fd86..0000000
--- a/curl.sh
+++ /dev/null
@@ -1,3 +0,0 @@
-#!/bin/bash
-
-curl --form sampleFile=@ftp/download/demi.png --form press=OK http://127.0.0.1:4000/upload
diff --git a/data/journal/prealloc.0 b/data/journal/prealloc.0
new file mode 100644
index 0000000..c0db61c
Binary files /dev/null and b/data/journal/prealloc.0 differ
diff --git a/data/journal/prealloc.1 b/data/journal/prealloc.1
new file mode 100644
index 0000000..4fce05a
Binary files /dev/null and b/data/journal/prealloc.1 differ
diff --git a/data/journal/prealloc.2 b/data/journal/prealloc.2
new file mode 100644
index 0000000..4fce05a
Binary files /dev/null and b/data/journal/prealloc.2 differ
diff --git a/data/local.0 b/data/local.0
new file mode 100644
index 0000000..97f5838
Binary files /dev/null and b/data/local.0 differ
diff --git a/data/local.ns b/data/local.ns
new file mode 100644
index 0000000..374fcca
Binary files /dev/null and b/data/local.ns differ
diff --git a/data/mongod.lock b/data/mongod.lock
new file mode 100755
index 0000000..e69de29
diff --git a/demi.png b/demi.png
deleted file mode 100644
index 5d8715e..0000000
Binary files a/demi.png and /dev/null differ
diff --git a/exos_transform.js b/exos_transform.js
deleted file mode 100644
index 27315b4..0000000
--- a/exos_transform.js
+++ /dev/null
@@ -1,41 +0,0 @@
-const bigObj = {
-  fruits: {
-    rouge: [ 'pomme', 'cerise', 'tomate', 'fraise' ],
-    vert: [ 'pomme', 'poire' ],
-    jaune: [ 'ananas', 'mangue' ],
-    violet: [ 'raisin', 'mure' ]
-  },
-  legumes: {
-    rouge: [ 'poivron', 'oignon' ],
-    vert: [ 'poivron', 'haricot' ],
-    jaune: [ 'poivron', 'oignon' ],
-    blanc: [ 'oignon' ],
-  },
-  boissons: {
-    rouge: {
-      gazeuse: [ 'coca-cola', 'diabolo' ],
-      plate: [ 'grenadine', 'fraise' ]
-    }
-    vert: {
-      gazeuse: [ 'sprite', 'diabolo' ],
-      plate: [ 'menthe' ]
-    }
-    jaune: {
-      gazeuse: [ 'diabolo' ],
-      plate: [ 'ricard', 'pulco-citron' ]
-    }
-  },
-  total: { rouge: 0, vert: 0, jaune: 0, violet: 0, blanc: 0 }
-};
-/*
-# COUNT
-1_ compter le nombre de legumes !
-2_ compter le nombre d'éléments rouge !
-3_ compter le nombre de boissons gazeuse !
-# CREATE
-1_ créer un TABLEAU qui contient toutes les valeurs 'vert'
- ```ex return: [ pomme, poire, ... ]```
-2_ créer un TABLEAU qui contient toutes les valeurs 'rouge' et 'jaune'
-  [ATTENTION]: si il y a des doublons, tu affiches SEULEMENT 1 valeur ET tu rajoutes un 'S' a la fin.
-3_ créer un tableau qui contient toutes les couleurs que peut avoir un 'diabolo'.
-*/ 
diff --git a/index.js b/index.js
deleted file mode 100644
index e3a2603..0000000
--- a/index.js
+++ /dev/null
@@ -1,22 +0,0 @@
-const express = require('express');
-const fileupload = require('express-fileupload');
-const bodyParser = require('body-parser');
-const routes = require('./routes/ftp');
-const authroute = require('./routes/auth');
-const countroute = require('./routes/count');
-const helmet = require('helmet');
-const app = express();
-
-app.use(helmet());
-app.use(fileupload());
-app.use(bodyParser.urlencoded({ extended: false }));
-app.use(bodyParser.json());
-app.use('/auth', authroute);
-app.use('/ftp', routes);
-app.use('/count', countroute);
-app.use(express.static('./static'));
-
-
-app.listen(process.env.port || 4000, () => {
-  console.log('Server listening on http://localhost:4000 or http://127.0.0.1:4000')
-})
diff --git a/package-lock.json b/package-lock.json
index 4e770e8..349b3f9 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -314,6 +314,14 @@
       "resolved": "https://registry.npmjs.org/assign-symbols/-/assign-symbols-1.0.0.tgz",
       "integrity": "sha1-WWZ/QfrdTyDMvCu5a41Pf3jsA2c="
     },
+    "async": {
+      "version": "2.6.1",
+      "resolved": "https://registry.npmjs.org/async/-/async-2.6.1.tgz",
+      "integrity": "sha512-fNEiL2+AZt6AlAw/29Cr0UDe4sRAHCpEHh54WMz+Bb7QfNcFw4h3loofyJpLeQs4Yx7yuqu/2dLgM5hKOs6HlQ==",
+      "requires": {
+        "lodash": "^4.17.10"
+      }
+    },
     "async-each": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/async-each/-/async-each-1.0.1.tgz",
@@ -1500,6 +1508,11 @@
         "pako": "~1.0.5"
       }
     },
+    "bson": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/bson/-/bson-1.1.0.tgz",
+      "integrity": "sha512-9Aeai9TacfNtWXOYarkFJRW2CWo+dRon+fuLZYJmvLV3+MiUp0bEI6IAZfXEIg7/Pl/7IWlLaDnhzTsD81etQA=="
+    },
     "buffer": {
       "version": "4.9.1",
       "resolved": "http://registry.npmjs.org/buffer/-/buffer-4.9.1.tgz",
@@ -3230,6 +3243,28 @@
       "resolved": "https://registry.npmjs.org/hide-powered-by/-/hide-powered-by-1.0.0.tgz",
       "integrity": "sha1-SoWtZYgfYoV/xwr3F0oRhNzM4ys="
     },
+    "history": {
+      "version": "4.7.2",
+      "resolved": "https://registry.npmjs.org/history/-/history-4.7.2.tgz",
+      "integrity": "sha512-1zkBRWW6XweO0NBcjiphtVJVsIQ+SXF29z9DVkceeaSLVMFXHool+fdCZD4spDCfZJCILPILc3bm7Bc+HRi0nA==",
+      "requires": {
+        "invariant": "^2.2.1",
+        "loose-envify": "^1.2.0",
+        "resolve-pathname": "^2.2.0",
+        "value-equal": "^0.4.0",
+        "warning": "^3.0.0"
+      },
+      "dependencies": {
+        "warning": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/warning/-/warning-3.0.0.tgz",
+          "integrity": "sha1-MuU3fLVy3kqwR1O9+IIcAe1gW3w=",
+          "requires": {
+            "loose-envify": "^1.0.0"
+          }
+        }
+      }
+    },
     "hmac-drbg": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
@@ -3240,6 +3275,11 @@
         "minimalistic-crypto-utils": "^1.0.1"
       }
     },
+    "hoist-non-react-statics": {
+      "version": "2.5.5",
+      "resolved": "https://registry.npmjs.org/hoist-non-react-statics/-/hoist-non-react-statics-2.5.5.tgz",
+      "integrity": "sha512-rqcy4pJo55FTTLWt+bU8ukscqHeE/e9KWvsOW2b/a3afxQZhwkQdT1rPPCJ0rYXdj4vNcasY8zHTH+jF/qStxw=="
+    },
     "home-or-tmp": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/home-or-tmp/-/home-or-tmp-2.0.0.tgz",
@@ -3610,6 +3650,11 @@
         "safe-buffer": "^5.0.1"
       }
     },
+    "kareem": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/kareem/-/kareem-2.3.0.tgz",
+      "integrity": "sha512-6hHxsp9e6zQU8nXsP+02HGWXwTkOEw6IROhF2ZA28cYbUk4eJ6QbtZvdqZOdD9YPKghG3apk5eOCvs+tLl3lRg=="
+    },
     "kind-of": {
       "version": "6.0.2",
       "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.2.tgz",
@@ -3657,6 +3702,11 @@
       "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
       "integrity": "sha1-gteb/zCmfEAF/9XiUVMArZyk168="
     },
+    "lodash.get": {
+      "version": "4.4.2",
+      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
+      "integrity": "sha1-LRd/ZS+jHpObRDjVNBSZ36OCXpk="
+    },
     "lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
@@ -3774,6 +3824,12 @@
         "readable-stream": "^2.0.1"
       }
     },
+    "memory-pager": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/memory-pager/-/memory-pager-1.1.0.tgz",
+      "integrity": "sha512-Mf9OHV/Y7h6YWDxTzX/b4ZZ4oh9NSXblQL8dtPCOomOtZciEHxePR78+uHFLLlsk01A6jVHhHsQZZ/WcIPpnzg==",
+      "optional": true
+    },
     "merge-descriptors": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
@@ -3905,6 +3961,51 @@
         }
       }
     },
+    "mongodb": {
+      "version": "3.1.8",
+      "resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.1.8.tgz",
+      "integrity": "sha512-yNKwYxQ6m00NV6+pMoWoheFTHSQVv1KkSrfOhRDYMILGWDYtUtQRqHrFqU75rmPIY8hMozVft8zdC4KYMWaM3Q==",
+      "requires": {
+        "mongodb-core": "3.1.7",
+        "safe-buffer": "^5.1.2"
+      }
+    },
+    "mongodb-core": {
+      "version": "3.1.7",
+      "resolved": "https://registry.npmjs.org/mongodb-core/-/mongodb-core-3.1.7.tgz",
+      "integrity": "sha512-YffpSrLmgFNmrvkGx+yX00KyBNk64C0BalfEn6vHHkXtcMUGXw8nxrMmhq5eXPLLlYeBpD/CsgNxE2Chf0o4zQ==",
+      "requires": {
+        "bson": "^1.1.0",
+        "require_optional": "^1.0.1",
+        "safe-buffer": "^5.1.2",
+        "saslprep": "^1.0.0"
+      }
+    },
+    "mongoose": {
+      "version": "5.3.11",
+      "resolved": "https://registry.npmjs.org/mongoose/-/mongoose-5.3.11.tgz",
+      "integrity": "sha512-LrsatxtUfZAerAxyFiaw/8T8M4T9Ff9+6wFkJwfTVDz9skX+HVOs70QOzTDawz0k0Q0I6qt9xv/ZYQi2Paykgw==",
+      "requires": {
+        "async": "2.6.1",
+        "bson": "~1.1.0",
+        "kareem": "2.3.0",
+        "lodash.get": "4.4.2",
+        "mongodb": "3.1.8",
+        "mongodb-core": "3.1.7",
+        "mongoose-legacy-pluralize": "1.0.2",
+        "mpath": "0.5.1",
+        "mquery": "3.2.0",
+        "ms": "2.0.0",
+        "regexp-clone": "0.0.1",
+        "safe-buffer": "5.1.2",
+        "sliced": "1.0.1"
+      }
+    },
+    "mongoose-legacy-pluralize": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/mongoose-legacy-pluralize/-/mongoose-legacy-pluralize-1.0.2.tgz",
+      "integrity": "sha512-Yo/7qQU4/EyIS8YDFSeenIvXxZN+ld7YdV9LqFVQJzTLye8unujAWPZ4NWKfFA+RNjh+wvTWKY9Z3E5XM6ZZiQ=="
+    },
     "move-concurrently": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/move-concurrently/-/move-concurrently-1.0.1.tgz",
@@ -3918,6 +4019,38 @@
         "run-queue": "^1.0.3"
       }
     },
+    "mpath": {
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/mpath/-/mpath-0.5.1.tgz",
+      "integrity": "sha512-H8OVQ+QEz82sch4wbODFOz+3YQ61FYz/z3eJ5pIdbMEaUzDqA268Wd+Vt4Paw9TJfvDgVKaayC0gBzMIw2jhsg=="
+    },
+    "mquery": {
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/mquery/-/mquery-3.2.0.tgz",
+      "integrity": "sha512-qPJcdK/yqcbQiKoemAt62Y0BAc0fTEKo1IThodBD+O5meQRJT/2HSe5QpBNwaa4CjskoGrYWsEyjkqgiE0qjhg==",
+      "requires": {
+        "bluebird": "3.5.1",
+        "debug": "3.1.0",
+        "regexp-clone": "0.0.1",
+        "safe-buffer": "5.1.2",
+        "sliced": "1.0.1"
+      },
+      "dependencies": {
+        "bluebird": {
+          "version": "3.5.1",
+          "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.5.1.tgz",
+          "integrity": "sha512-MKiLiV+I1AA596t9w1sQJ8jkiSr5+ZKi0WKrYGUn6d1Fx+Ij4tIj+m2WMQSGczs5jZVxV339chE8iwk6F64wjA=="
+        },
+        "debug": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
+          "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
+          "requires": {
+            "ms": "2.0.0"
+          }
+        }
+      }
+    },
     "ms": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
@@ -4340,6 +4473,15 @@
       "resolved": "https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz",
       "integrity": "sha1-mEcocL8igTL8vdhoEputEsPAKeM="
     },
+    "prop-types": {
+      "version": "15.6.2",
+      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.6.2.tgz",
+      "integrity": "sha512-3pboPvLiWD7dkI3qf3KbUe6hKFKa52w+AE0VCqECtf+QHAKgOL37tTaNCnuX1nAAQ4ZhyP+kYVKf8rLmJ/feDQ==",
+      "requires": {
+        "loose-envify": "^1.3.1",
+        "object-assign": "^4.1.1"
+      }
+    },
     "proxy-addr": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.4.tgz",
@@ -4471,6 +4613,70 @@
         "strip-json-comments": "~2.0.1"
       }
     },
+    "react": {
+      "version": "16.6.1",
+      "resolved": "https://registry.npmjs.org/react/-/react-16.6.1.tgz",
+      "integrity": "sha512-OtawJThYlvRgm9BXK+xTL7BIlDx8vv21j+fbQDjRRUyok6y7NyjlweGorielTahLZHYIdKUoK2Dp9ByVWuMqxw==",
+      "requires": {
+        "loose-envify": "^1.1.0",
+        "object-assign": "^4.1.1",
+        "prop-types": "^15.6.2",
+        "scheduler": "^0.11.0"
+      }
+    },
+    "react-dom": {
+      "version": "16.6.1",
+      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-16.6.1.tgz",
+      "integrity": "sha512-zm+wBuEMGm009Wt1uE4Zw5KcXOW7qC4E/xW/fpJsCsbOco4U/R84u+DzzO/S4SYSdNBcqcaulcp4w3FXl8pImw==",
+      "requires": {
+        "loose-envify": "^1.1.0",
+        "object-assign": "^4.1.1",
+        "prop-types": "^15.6.2",
+        "scheduler": "^0.11.0"
+      }
+    },
+    "react-router": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/react-router/-/react-router-4.3.1.tgz",
+      "integrity": "sha512-yrvL8AogDh2X42Dt9iknk4wF4V8bWREPirFfS9gLU1huk6qK41sg7Z/1S81jjTrGHxa3B8R3J6xIkDAA6CVarg==",
+      "requires": {
+        "history": "^4.7.2",
+        "hoist-non-react-statics": "^2.5.0",
+        "invariant": "^2.2.4",
+        "loose-envify": "^1.3.1",
+        "path-to-regexp": "^1.7.0",
+        "prop-types": "^15.6.1",
+        "warning": "^4.0.1"
+      },
+      "dependencies": {
+        "isarray": {
+          "version": "0.0.1",
+          "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
+          "integrity": "sha1-ihis/Kmo9Bd+Cav8YDiTmwXR7t8="
+        },
+        "path-to-regexp": {
+          "version": "1.7.0",
+          "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-1.7.0.tgz",
+          "integrity": "sha1-Wf3g9DW62suhA6hOnTvGTpa5k30=",
+          "requires": {
+            "isarray": "0.0.1"
+          }
+        }
+      }
+    },
+    "react-router-dom": {
+      "version": "4.3.1",
+      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-4.3.1.tgz",
+      "integrity": "sha512-c/MlywfxDdCp7EnB7YfPMOfMD3tOtIjrQlj/CKfNMBxdmpJP8xcz5P/UAFn3JbnQCNUxsHyVVqllF9LhgVyFCA==",
+      "requires": {
+        "history": "^4.7.2",
+        "invariant": "^2.2.4",
+        "loose-envify": "^1.3.1",
+        "prop-types": "^15.6.1",
+        "react-router": "^4.3.1",
+        "warning": "^4.0.1"
+      }
+    },
     "readable-stream": {
       "version": "2.3.6",
       "resolved": "http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz",
@@ -4529,6 +4735,11 @@
         "safe-regex": "^1.1.0"
       }
     },
+    "regexp-clone": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/regexp-clone/-/regexp-clone-0.0.1.tgz",
+      "integrity": "sha1-p8LgmJH9vzj7sQ03b7cwA+aKxYk="
+    },
     "regexpu-core": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-2.0.0.tgz",
@@ -4599,6 +4810,25 @@
         "is-finite": "^1.0.0"
       }
     },
+    "require_optional": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/require_optional/-/require_optional-1.0.1.tgz",
+      "integrity": "sha512-qhM/y57enGWHAe3v/NcwML6a3/vfESLe/sGM2dII+gEO0BpKRUkWZow/tyloNqJyN6kXSl3RyyM8Ll5D/sJP8g==",
+      "requires": {
+        "resolve-from": "^2.0.0",
+        "semver": "^5.1.0"
+      }
+    },
+    "resolve-from": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-2.0.0.tgz",
+      "integrity": "sha1-lICrIOlP+h2egKgEx+oUdhGWa1c="
+    },
+    "resolve-pathname": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/resolve-pathname/-/resolve-pathname-2.2.0.tgz",
+      "integrity": "sha512-bAFz9ld18RzJfddgrO2e/0S2O81710++chRMUxHjXOYKF6jTAMrUNZrEZ1PvV0zlhfjidm08iRPdTLPno1FuRg=="
+    },
     "resolve-url": {
       "version": "0.2.1",
       "resolved": "https://registry.npmjs.org/resolve-url/-/resolve-url-0.2.1.tgz",
@@ -4652,6 +4882,24 @@
       "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
       "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
     },
+    "saslprep": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/saslprep/-/saslprep-1.0.2.tgz",
+      "integrity": "sha512-4cDsYuAjXssUSjxHKRe4DTZC0agDwsCqcMqtJAQPzC74nJ7LfAJflAtC1Zed5hMzEQKj82d3tuzqdGNRsLJ4Gw==",
+      "optional": true,
+      "requires": {
+        "sparse-bitfield": "^3.0.3"
+      }
+    },
+    "scheduler": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.11.0.tgz",
+      "integrity": "sha512-MAYbBfmiEHxF0W+c4CxMpEqMYK+rYF584VP/qMKSiHM6lTkBKKYOJaDiSILpJHla6hBOsVd6GucPL46o2Uq3sg==",
+      "requires": {
+        "loose-envify": "^1.1.0",
+        "object-assign": "^4.1.1"
+      }
+    },
     "schema-utils": {
       "version": "0.4.7",
       "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-0.4.7.tgz",
@@ -4780,6 +5028,11 @@
       "resolved": "https://registry.npmjs.org/slash/-/slash-1.0.0.tgz",
       "integrity": "sha1-xB8vbDn8FtHNF61LXYlhFK5HDVU="
     },
+    "sliced": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/sliced/-/sliced-1.0.1.tgz",
+      "integrity": "sha1-CzpmK10Ewxd7GSa+qCsD+Dei70E="
+    },
     "snapdragon": {
       "version": "0.8.2",
       "resolved": "https://registry.npmjs.org/snapdragon/-/snapdragon-0.8.2.tgz",
@@ -4912,6 +5165,15 @@
       "resolved": "https://registry.npmjs.org/source-map-url/-/source-map-url-0.4.0.tgz",
       "integrity": "sha1-PpNdfd1zYxuXZZlW1VEo6HtQhKM="
     },
+    "sparse-bitfield": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
+      "integrity": "sha1-/0rm5oZWBWuks+eSqzM004JzyhE=",
+      "optional": true,
+      "requires": {
+        "memory-pager": "^1.0.2"
+      }
+    },
     "split": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/split/-/split-1.0.1.tgz",
@@ -5412,6 +5674,11 @@
       "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
       "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
     },
+    "value-equal": {
+      "version": "0.4.0",
+      "resolved": "https://registry.npmjs.org/value-equal/-/value-equal-0.4.0.tgz",
+      "integrity": "sha512-x+cYdNnaA3CxvMaTX0INdTCN8m8aF2uY9BvEqmxuYp8bL09cs/kWVQPVGcA35fMktdOsP69IgU7wFj/61dJHEw=="
+    },
     "vary": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
@@ -5425,6 +5692,14 @@
         "indexof": "0.0.1"
       }
     },
+    "warning": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/warning/-/warning-4.0.2.tgz",
+      "integrity": "sha512-wbTp09q/9C+jJn4KKJfJfoS6VleK/Dti0yqWSm6KMvJ4MRCXFQNapHuJXutJIrWV0Cf4AhTdeIe4qdKHR1+Hug==",
+      "requires": {
+        "loose-envify": "^1.0.0"
+      }
+    },
     "watchpack": {
       "version": "1.6.0",
       "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-1.6.0.tgz",
diff --git a/package.json b/package.json
index 9456750..fe386a3 100644
--- a/package.json
+++ b/package.json
@@ -6,7 +6,7 @@
   "main": "index.js",
   "scripts": {
     "test": "echo \"Error: no test specified\" && exit 1",
-    "start": "nodemon index.js"
+    "start": "nodemon server/index.js"
   },
   "repository": {
     "type": "git",
@@ -29,9 +29,15 @@
     "express-fileupload": "^1.0.0",
     "helmet": "^3.14.0",
     "jsonwebtoken": "^8.3.0",
+    "mongoose": "^5.3.11",
     "multer": "^1.4.1",
     "nodemon": "^1.18.6",
     "path": "^0.12.7",
+    "prop-types": "^15.6.2",
+    "react": "^16.6.1",
+    "react-dom": "^16.6.1",
+    "react-router": "^4.3.1",
+    "react-router-dom": "^4.3.1",
     "webpack": "^4.25.1"
   }
 }
diff --git a/routes/auth.js b/routes/auth.js
index 65eb9dc..a7e7276 100644
--- a/routes/auth.js
+++ b/routes/auth.js
@@ -29,6 +29,7 @@ const tokenChecker = (req, res, next) => {
 router.post('/token', (req, res) => {
   //refresh token
   const postData = req.body;
+  console.log(postData.refreshToken)
   if ((postData.refreshToken) && (postData.refreshToken in tokenList)) {
     const user = {
       "email": postData.email,
@@ -55,17 +56,16 @@ router.post('/login', (req, res) => {
   /*
   authentication
   */
-  console.log(req.headers)
   const token = jwt.sign(user, config.secret, { expiresIn: config.tokenLife });
   const refreshToken = jwt.sign(user, config.refreshSecret, { expiresIn: config.refreshTokenLife });
   const response = {
-    headers: req.headers,
     "status": "Logged in",
     "token": token,
     "refreshToken": refreshToken
   };
   tokenList[refreshToken] = response;
-  res.status(200).json(response);
+  console.log(user)
+  res.redirect('/');
 });
 
 module.exports = router;
diff --git a/routes/count.js b/routes/count.js
deleted file mode 100644
index 76debc0..0000000
--- a/routes/count.js
+++ /dev/null
@@ -1,101 +0,0 @@
-const express = require('express');
-const router = express.Router();
-
-const bigObj = {
-  fruits: {
-    rouge: [ 'pomme', 'cerise', 'tomate', 'fraise' ],
-    vert: [ 'pomme', 'poire' ],
-    jaune: [ 'ananas', 'mangue' ],
-    violet: [ 'raisin', 'mure' ]
-  },
-  legumes: {
-    rouge: [ 'poivron', 'oignon' ],
-    vert: [ 'poivron', 'haricot' ],
-    jaune: [ 'poivron', 'oignon' ],
-    blanc: [ 'oignon' ],
-  },
-  boissons: {
-    rouge: {
-      gazeuse: [ 'coca-cola', 'diabolo' ],
-      plate: [ 'grenadine', 'fraise' ]
-    },
-    vert: {
-      gazeuse: [ 'sprite', 'diabolo' ],
-      plate: [ 'menthe' ]
-    },
-    jaune: {
-      gazeuse: [ 'diabolo' ],
-      plate: [ 'ricard', 'pulco-citron' ]
-    }
-  },
-  total: { rouge: 0, vert: 0, jaune: 0, violet: 0, blanc: 0 }
-};
-
-/*
-map
-filter
-reduce
-
-*/
-const legumes = (obj) => {
-  let ret = 0;
-  for (key in obj) {
-    if (obj.hasOwnProperty(key)) {
-      ret += obj[key].length;
-    }
-  }
-  console.log('il y a '+ret+' legumes');
-}
-
-const rouge = (obj) => {
-  let ret = 0;
-  for(key in obj) {
-    if (obj[key].rouge.length) {
-      ret += obj[key].rouge.length;
-    }
-  }
-  console.log('il y a '+ret+' elements rouges');
-}
-
-const gazeux = (obj) => {
-  let ret = 0;
-  for(key in obj) {
-      ret += obj[key].gazeuse.length;
-  }
-  console.log('il y a '+ret+' boissons gazeuses');
-}
-
-const array_valeurVert = (obj) => {
-  let ret = [];
-  for(key in obj) {
-    if (Array.isArray(obj[key].vert))
-      ret = ret.concat(obj[key].vert);
-    else {
-      for(i in obj[key].vert)
-        ret = ret.concat(obj[key].vert[i]);
-    }
-  }
-  console.log(ret);
-}
-
-router.get('/display', (req, res) => {
-    //legumes(bigObj.legumes);
-    //rouge(bigObj);
-    //gazeux(bigObj.boissons);
-    array_valeurVert(bigObj);
-    res.redirect('/');
-});
-
-/*
-# COUNT
-1_ compter le nombre de legumes !
-2_ compter le nombre d'éléments rouge !
-3_ compter le nombre de boissons gazeuse !
-# CREATE
-1_ créer un TABLEAU qui contient toutes les valeurs 'vert'
- ```ex return: [ pomme, poire, ... ]```
-2_ créer un TABLEAU qui contient toutes les valeurs 'rouge' et 'jaune'
-  [ATTENTION]: si il y a des doublons, tu affiches SEULEMENT 1 valeur ET tu rajoutes un 'S' a la fin.
-3_ créer un tableau qui contient toutes les couleurs que peut avoir un 'diabolo'.
-*/
-module.exports = router;
diff --git a/routes/ftp.js b/routes/ftp.js
deleted file mode 100644
index 8abd75b..0000000
--- a/routes/ftp.js
+++ /dev/null
@@ -1,86 +0,0 @@
-const express = require('express');
-const router = express.Router();
-const fs = require('fs');
-
-
-const getHeaders = (req, res, next) => {
-	// POURQUOI ?
-  if (req.headers['content-type'] === undefined)
-    console.log(req.headers);
-  else
-    console.log(req.headers);
-  next();
-}
-
-//router.use(uploadToken);
-//router.use(getHeaders);
-
-
-function isEmpty(obj) {
-    for(var key in obj) {
-        if(obj.hasOwnProperty(key))
-            return false;
-    }
-    return true;
-}
-
-router.get('/', (req, res) => {
-  res.sendStatus(401).json({
-    message: 'admin page'
-  });
-});
-
-router.post('/upload', getHeaders, (req, res) => {
-  if (isEmpty(req.files)) {
-    console.log('no file')
-    res.redirect('/');
-  } else {
-    const srcName = Object.getOwnPropertyNames(req.files)[0];
-    fs.writeFile(__dirname+'/../uploadedFiles/'+req.files[srcName].name, req.files[srcName].data, function (err) {
-      if (err) {
-        return res.sendStatus(500).json({
-          message: err
-        });
-      }
-      return res.status(200).json({
-        success: true,
-        message: 'File Uploaded Successfuly'
-      });
-    });
-  }
-
-});
-
-router.post('/download', (req, res) => {
-  res.download('./demi.png');
-});
-
-router.get('/getUploadedFiles', (req, res) => {
-  fs.readdir(__dirname+'/../uploadedFiles', (err, files) => {
-    if (err) {
-      return res.sendStatus(500).json({
-        message: err
-      });
-    }
-    if (isEmpty(files)) {
-      console.log('folder is empty');
-    } else {
-      console.log(files);
-    }
-    res.redirect('/');
-  });
-});
-
-router.get('/delete', (req, res) => {
-  console.log('deleted');
-  res.redirect('/');
-  /*
-  fs.unlink('path/file.txt', (err) => {
-    if (err) throw err;
-    console.log('path/file.txt was deleted');
-  });
-  */
-})
-
-
-module.exports = router;
diff --git a/server/config/User.js b/server/config/User.js
new file mode 100644
index 0000000..5b0b09b
--- /dev/null
+++ b/server/config/User.js
@@ -0,0 +1,9 @@
+const mongoose = require('mongoose');
+
+let UserSchema = new mongoose.Schema({
+  username: String,
+  email: String,
+  token: String
+});
+
+module.exports = mongoose.model('User', UserSchema);
diff --git a/server/config/conf.js b/server/config/conf.js
new file mode 100644
index 0000000..99ca4de
--- /dev/null
+++ b/server/config/conf.js
@@ -0,0 +1,3 @@
+const tokenUpload = '58zf6f558fs58f';
+
+module.exports = tokenUpload;
diff --git a/server/config/config.json b/server/config/config.json
new file mode 100644
index 0000000..6a4da78
--- /dev/null
+++ b/server/config/config.json
@@ -0,0 +1,6 @@
+{
+    "secret": "superkangourou",
+    "refreshSecret": "superpoissonfrais",
+    "tokenLife": 900,
+    "refreshTokenLife": 9000
+}
diff --git a/server/curl.sh b/server/curl.sh
new file mode 100755
index 0000000..cb8fd86
--- /dev/null
+++ b/server/curl.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+curl --form sampleFile=@ftp/download/demi.png --form press=OK http://127.0.0.1:4000/upload
diff --git a/server/demi.png b/server/demi.png
new file mode 100644
index 0000000..5d8715e
Binary files /dev/null and b/server/demi.png differ
diff --git a/server/index.js b/server/index.js
new file mode 100644
index 0000000..a1cd84d
--- /dev/null
+++ b/server/index.js
@@ -0,0 +1,26 @@
+const express = require('express');
+const fileupload = require('express-fileupload');
+const bodyParser = require('body-parser');
+const routes = require('./routes/ftp');
+const authroute = require('./routes/auth');
+const helmet = require('helmet');
+const app = express();
+const mongoose = require('mongoose');
+
+mongoose.connect('mongodb://localhost:27017/whis').then(
+  () => { console.log('Database connected') },
+  err => { console.log('Connection DB failed: ' + err)}
+);
+
+app.use(helmet());
+app.use(fileupload());
+app.use(bodyParser.urlencoded({ extended: false }));
+app.use(bodyParser.json());
+app.use('/auth', authroute);
+
+app.use(express.static('./server/static'));
+
+
+app.listen(process.env.port || 4000, () => {
+  console.log('Server listening on http://localhost:4000 or http://127.0.0.1:4000')
+})
diff --git a/server/routes/auth.js b/server/routes/auth.js
new file mode 100644
index 0000000..a7e7276
--- /dev/null
+++ b/server/routes/auth.js
@@ -0,0 +1,71 @@
+const express = require('express');
+const router = express.Router();
+const config = require('../config/config');
+const jwt = require('jsonwebtoken');
+const tokenList = {};
+
+//Midlewrare function
+const tokenChecker = (req, res, next) => {
+  const token = req.headers['x-access-token'] // || req.query.token || req.body.token
+  if (token) {
+    jwt.verify(token, config.secret, (err, decoded) => {
+      if (err) {
+        return res.status(401).json({
+          "error": true,
+          "message": 'Unauthorized access.'
+        });
+      }
+      req.decoded = decoded;
+      next();
+    });
+  } else { //pas de token
+    return res.status(403).send({
+      "error": true,
+      "message": 'No token provided.'
+    });
+  }
+}
+
+router.post('/token', (req, res) => {
+  //refresh token
+  const postData = req.body;
+  console.log(postData.refreshToken)
+  if ((postData.refreshToken) && (postData.refreshToken in tokenList)) {
+    const user = {
+      "email": postData.email,
+      "name": postData.name
+    }
+    const token = jwt.sign(user, config.secret, { expiresIn: config.tokenLife })
+    const response = {
+      "token": token
+    }
+    //add token in the list
+    tokenList[postData.refreshToken].token = token;
+    res.status(200).json(response);
+  } else {
+    res.status(404).send('Invalid request');
+  }
+})
+
+router.post('/login', (req, res) => {
+  const postData = req.body;
+  const user = {
+    "email": postData.email,
+    "name": postData.name
+  };
+  /*
+  authentication
+  */
+  const token = jwt.sign(user, config.secret, { expiresIn: config.tokenLife });
+  const refreshToken = jwt.sign(user, config.refreshSecret, { expiresIn: config.refreshTokenLife });
+  const response = {
+    "status": "Logged in",
+    "token": token,
+    "refreshToken": refreshToken
+  };
+  tokenList[refreshToken] = response;
+  console.log(user)
+  res.redirect('/');
+});
+
+module.exports = router;
diff --git a/server/routes/count.js b/server/routes/count.js
new file mode 100644
index 0000000..e33dd69
--- /dev/null
+++ b/server/routes/count.js
@@ -0,0 +1,105 @@
+const express = require('express');
+const router = express.Router();
+
+const bigObj = {
+  fruits: {
+    rouge: [ 'pomme', 'cerise', 'tomate', 'fraise' ],
+    vert: [ 'pomme', 'poire' ],
+    jaune: [ 'ananas', 'mangue' ],
+    violet: [ 'raisin', 'mure' ]
+  },
+  legumes: {
+    rouge: [ 'poivron', 'oignon' ],
+    vert: [ 'poivron', 'haricot' ],
+    jaune: [ 'poivron', 'oignon' ],
+    blanc: [ 'oignon' ],
+  },
+  boissons: {
+    rouge: {
+      gazeuse: [ 'coca-cola', 'diabolo' ],
+      plate: [ 'grenadine', 'fraise' ]
+    },
+    vert: {
+      gazeuse: [ 'sprite', 'diabolo' ],
+      plate: [ 'menthe' ]
+    },
+    jaune: {
+      gazeuse: [ 'diabolo' ],
+      plate: [ 'ricard', 'pulco-citron' ]
+    }
+  },
+  total: { rouge: 0, vert: 0, jaune: 0, violet: 0, blanc: 0 }
+};
+
+/*
+map
+filter
+reduce
+sort
+ indexOf
+*/
+const legumes = (obj) => {
+  let ret = 0;
+  Object.keys(obj).map((key) => {
+    ret += obj[key].length;
+  });
+  console.log(`il y a ${ret} legumes`)
+}
+
+const rouge = (obj) => {
+  let ret = 0;
+  Object.keys(obj).map((key) => {
+    ret += obj[key].rouge.length ? obj[key].rouge.length : 0;
+  });
+  /*
+  for(key in obj) {
+    if (obj[key].rouge.length) {
+      ret += obj[key].rouge.length;
+    }
+  }
+  */
+  console.log(`il y a ${ret} elements rouges`);
+}
+
+const gazeux = (obj) => {
+  let ret = 0;
+  for(key in obj) {
+      ret += obj[key].gazeuse.length;
+  }
+  console.log('il y a '+ret+' boissons gazeuses');
+}
+
+const array_valeurVert = (obj) => {
+  let ret = [];
+  for(key in obj) {
+    if (Array.isArray(obj[key].vert))
+      ret = ret.concat(obj[key].vert);
+    else {
+      for(i in obj[key].vert)
+        ret = ret.concat(obj[key].vert[i]);
+    }
+  }
+  console.log(ret);
+}
+
+router.get('/display', (req, res) => {
+    //legumes(bigObj.legumes);
+    rouge(bigObj);
+    //gazeux(bigObj.boissons);
+    //array_valeurVert(bigObj);
+    res.redirect('/');
+});
+
+/*
+# COUNT
+1_ compter le nombre de legumes !
+2_ compter le nombre d'éléments rouge !
+3_ compter le nombre de boissons gazeuse !
+# CREATE
+1_ créer un TABLEAU qui contient toutes les valeurs 'vert'
+ ```ex return: [ pomme, poire, ... ]```
+2_ créer un TABLEAU qui contient toutes les valeurs 'rouge' et 'jaune'
+  [ATTENTION]: si il y a des doublons, tu affiches SEULEMENT 1 valeur ET tu rajoutes un 'S' a la fin.
+3_ créer un tableau qui contient toutes les couleurs que peut avoir un 'diabolo'.
+*/
+module.exports = router;
diff --git a/server/routes/ftp.js b/server/routes/ftp.js
new file mode 100644
index 0000000..8abd75b
--- /dev/null
+++ b/server/routes/ftp.js
@@ -0,0 +1,86 @@
+const express = require('express');
+const router = express.Router();
+const fs = require('fs');
+
+
+const getHeaders = (req, res, next) => {
+	// POURQUOI ?
+  if (req.headers['content-type'] === undefined)
+    console.log(req.headers);
+  else
+    console.log(req.headers);
+  next();
+}
+
+//router.use(uploadToken);
+//router.use(getHeaders);
+
+
+function isEmpty(obj) {
+    for(var key in obj) {
+        if(obj.hasOwnProperty(key))
+            return false;
+    }
+    return true;
+}
+
+router.get('/', (req, res) => {
+  res.sendStatus(401).json({
+    message: 'admin page'
+  });
+});
+
+router.post('/upload', getHeaders, (req, res) => {
+  if (isEmpty(req.files)) {
+    console.log('no file')
+    res.redirect('/');
+  } else {
+    const srcName = Object.getOwnPropertyNames(req.files)[0];
+    fs.writeFile(__dirname+'/../uploadedFiles/'+req.files[srcName].name, req.files[srcName].data, function (err) {
+      if (err) {
+        return res.sendStatus(500).json({
+          message: err
+        });
+      }
+      return res.status(200).json({
+        success: true,
+        message: 'File Uploaded Successfuly'
+      });
+    });
+  }
+
+});
+
+router.post('/download', (req, res) => {
+  res.download('./demi.png');
+});
+
+router.get('/getUploadedFiles', (req, res) => {
+  fs.readdir(__dirname+'/../uploadedFiles', (err, files) => {
+    if (err) {
+      return res.sendStatus(500).json({
+        message: err
+      });
+    }
+    if (isEmpty(files)) {
+      console.log('folder is empty');
+    } else {
+      console.log(files);
+    }
+    res.redirect('/');
+  });
+});
+
+router.get('/delete', (req, res) => {
+  console.log('deleted');
+  res.redirect('/');
+  /*
+  fs.unlink('path/file.txt', (err) => {
+    if (err) throw err;
+    console.log('path/file.txt was deleted');
+  });
+  */
+})
+
+
+module.exports = router;
diff --git a/server/static/index.html b/server/static/index.html
new file mode 100644
index 0000000..287fd92
--- /dev/null
+++ b/server/static/index.html
@@ -0,0 +1,18 @@
+<html>
+<head>
+<title>Upload file</title>
+</head>
+<body>
+
+  <div style="container">
+    <form method="post" action="/auth/token" enctype="multipart/form-data">
+      <button type="file" name="" value="dfile">test token</button>
+    </form>
+    <form method="post" action="/auth/login" enctype="multipart/form-data">
+      <button type="file" name="" value="dfile">login</button>
+    </form>
+  </div>
+
+
+</body>
+</html>
diff --git a/server/uploadedFiles/data.log b/server/uploadedFiles/data.log
new file mode 100644
index 0000000..e69de29
diff --git a/static/index.html b/static/index.html
index 9343b7a..d27dafe 100644
--- a/static/index.html
+++ b/static/index.html
@@ -3,30 +3,15 @@
 <title>Upload file</title>
 </head>
 <body>
-  <div>
-    <form method="post" action="/ftp/upload" enctype="multipart/form-data">
-      <input type="file" name="sampleFile"/>
-      <button type="submit" name="press" value="UPLOAD">Upload File</button>
-    </form>
-  </div>
-  <div>
-    <form method="post" action="/ftp/download" enctype="multipart/form-data">
-      <button type="file" name="" value="dfile">Download Picture</button>
-    </form>
-  </div>
-  <form method="get" action="/ftp/getUploadedFiles" enctype="multipart/form-data">
-    <button type="file" name="" value="gfile">Uploaded Files</button>
-  </form>
-  <div>
-    <form method="post" action="/auth/login" enctype="multipart/form-data">
+  
+  <div style="container">
+    <form method="post" action="/auth/token" enctype="multipart/form-data">
       <button type="file" name="" value="dfile">test token</button>
     </form>
-  </div>
-  <div>
-    <form method="get" action="/count/display" enctype="multipart/form-data">
-      <button type="file" name="" value="dfile">exos transform</button>
+    <form method="post" action="/auth/login" enctype="multipart/form-data">
+      <button type="file" name="" value="dfile">login</button>
     </form>
-  </div>
+  </div
 </div>
 
 </body>
diff --git a/uploadedFiles/data.log b/uploadedFiles/data.log
deleted file mode 100644
index e69de29..0000000
diff --git a/uploadedFiles/demi.png b/uploadedFiles/demi.png
deleted file mode 100644
index 5d8715e..0000000
Binary files a/uploadedFiles/demi.png and /dev/null differ
